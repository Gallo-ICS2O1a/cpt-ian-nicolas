# variables
line_distance_vect = PVector(-50, 0)
line_point1 = PVector(400, 390)
rotation_speed =  -0.1
speed = PVector(0, 10)
power_point = PVector(100, 100)
y1 = PVector(120, 125)
y2 = PVector(100, 150)
bad = color(230, 17, 17)
good = color(17, 230, 34)
click_number = 0

def setup():
    size(800, 400)

def draw():
    global speed
    global power_point
    global bad
    global good
    background(255)
    noStroke()

    # Power Bar
    if click_number == 0:
        fill(bad)
        rect(100, 100, 50, 100)    
        fill(good)
        rect(100, 200, 50, 100)
        fill(bad)
        rect(100, 300, 50, 100)
        stroke(10)
        fill(0)
        triangle(power_point.x, power_point.y, power_point.x + 20, power_point.y + 25, power_point.x, power_point.y + 50)
    
    
    
        power_point.add(speed)
    
    
    
        if power_point.y >= 350:
    
            speed = speed.mult(-1)
    
    
    
        elif power_point.y <= 100:
    
    
    
            speed = speed.mult(-1)

    

    global line_point1

    global rotation_speed

    global line_distance_vect

    global line_angle





    # this makes the line

    # print(line_distance_vect.y)


    if click_number == 1:
    
        stroke(2)
        line(line_point1.x, line_point1.y, line_point1.x + line_distance_vect.x, line_point1.y + line_distance_vect.y)
        
        line_angle = degrees(line_distance_vect.heading())
            
            
        if line_angle < -180 or line_angle > 0:
            
            rotation_speed = - rotation_speed
            
            
            
        line_distance_vect.rotate(rotation_speed)
    

def mousePressed():
    
    global click_number
    global rotation_speed
    global line_angle
    global line_distance_vect
    global speed
    global power_point
    global power
    

    if click_number == 0:
        speed = speed.mult(0)
        power = PVector(0, 400 - power_point.y - 25, 0)
        # print(power)
        click_number += 1


    elif click_number == 1:
        rotation_speed = 0
        direction_vect = PVector.fromAngle(line_distance_vect.heading())
        direction_vect = direction_vect.mult(-1)
        ball_direction = PVector(direction_vect.x, 0, 0)
        # print(ball_direction)
        click_number += 1
        shot = power.add(ball_direction)
        print(shot)


        
        
