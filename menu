# Menu
text_instruction = 30
text_play = 30
filler = 255
instruction = False
play = False

# Height Bar
bad = color(230, 17, 17)
good = color(17, 230, 34)
height_point = PVector(100, 100)
height_speed = PVector(0, 10)

# Aim Bar
aim_point = PVector(400, 390)
aim_point1 = PVector(-50, 0)
rotation_height_speed = 0.1
ball_pos = PVector(400, 385)
ball_size = 30

# Power Bar
power_point = PVector(700, 385)
rect_height_point = PVector(power_point.x - 7.5, power_point.y + 15)
rect_height_dim = PVector(15, 400 - power_point.y - 15)
power_change = PVector(0, -1)

# Shooting
click_number = 0
shot = PVector(0, 0, 0)


def setup():
    size(800, 400)


def draw():
    global instruction, text_play, filler
    global text_instruction, play

    global bad, good, height_point, height_speed
    global aim_point, aim_point1, rotation_height_speed, ball_pos, ball_size
    global click_number, shot
    global power_point, rect_height_point, rect_height_dim, power_change

    background(filler)
    fill(0)
    textSize(50)
    text("Menu:", 350, 100)

    textSize(text_instruction)
    text("Instructions", 100, 150)
    textSize(text_play)
    text("Play", 100, 200)

    # instruction
    if mouseX > 100 and mouseX < 270 and mouseY > 100 and mouseY < 150:
        text_instruction = 50
    else:
        text_instruction = 30
    if instruction is True:
        background(255)
        fill(0)
        textSize(30)
        text("Instructions:", 300, 80)
        textSize(10)
        text("These are the instructions", 100, 200)
        fill(255)
        rect(700, 300, 100, 100)
        fill(0)
        textSize(10)
        text("<-- BACK", 725, 350)

    # play
    if mouseX > 100 and mouseX < 160 and mouseY > 150 and mouseY < 200:
        text_play = 50
    else:
        text_play = 30

    if play is True:
        background(100, 255, 10)
        background(255)
        noStroke()
        fill(0)
        rect(750, 0, 50, 50)
        # Height Bar
        fill(bad)
        rect(100, 100, 50, 100)
        fill(good)
        rect(100, 200, 50, 100)
        fill(bad)
        rect(100, 300, 50, 100)

        stroke(0)
        strokeWeight(5)
        fill(0)
        line(height_point.x, height_point.y, height_point.x + 50, height_point.y)
        height_point.add(height_speed)

        if height_point.y >= 400:
            height_speed = height_speed.mult(-1)
        elif height_point.y <= 100:
            height_speed = height_speed.mult(-1)

        # Aim Bar
        strokeWeight(1)
        line(aim_point.x, aim_point.y, aim_point.x + aim_point1.x, aim_point.y + aim_point1.y)
        line_angle = degrees(aim_point1.heading())
        if line_angle < -180 or line_angle > 0:
            rotation_height_speed = -rotation_height_speed
        aim_point1.rotate(rotation_height_speed)

        # Power Arrow
        fill(0)
        triangle(power_point.x, power_point.y, power_point.x - 25, power_point.y + 15, power_point.x + 25, power_point.y + 15)
        rect(rect_height_point.x, rect_height_point.y, rect_height_dim.x, rect_height_dim.y)

        if power_point.y < 0 or power_point.y > 385:
            power_change = power_change.mult(-1)

        power_point.add(power_change)
        rect_height_dim.add(power_change)
        # print(rect_height_point)

        translate(shot.x, shot.y, shot.z)
        beginShape()
        ellipse(ball_pos.x, ball_pos.y, ball_size, ball_size)
        endShape(CLOSE)
        shot.add(shot)
        # print(ball_pos)
    # print(play)


def mouseClicked():
    global filler
    global instruction, play

    # instructions
    if instruction is False:
        if mouseX > 100 and mouseX < 270 and mouseY > 100 and mouseY < 150:
            instruction = True
    if instruction is True:
        if mouseX > 700 and mouseX < 800 and mouseY > 300 and mouseY < 400:
            instruction = False
    # print(instruction)

    # play
    if play is False:
        if mouseX > 100 and mouseX < 160 and mouseY > 150 and mouseY < 200:
            play = True
    if play is True:
        if mouseX > 750 and mouseX < 800 and mouseY > 0 and mouseY < 50:
            play = False
    # print(play)


def mousePressed():
    global bad, good, height_point, height_speed
    global aim_point, aim_point1, rotation_height_speed
    global click_number, power, shot
    global ball_direction, power_change
    global height_power
    global text_play

    if play is True:
        if click_number == 0:
            height_speed = height_speed.mult(0)
            height_power = PVector(0, (-(400 - height_point.y))//25, 0)
            print(height_power)
            click_number += 1

        elif click_number == 1:
            rotation_height_speed = 0
            aim_angle = PVector.sub(aim_point + aim_point1, aim_point)
            # aim_point2 = PVector.fromAngle(aim_point1.heading())
            ball_direction = PVector(aim_angle.x, 0, 0)
            print(ball_direction)
            click_number += 1

        elif click_number == 2:
            power_change = power_change.mult(0)
            power = PVector(0, 0, -(power_point.y)//10)
            print(power)
            shot = shot.add(height_power)
            shot = shot.add(ball_direction)
            shot = shot.add(power)
            print(shot)

    elif play is not True:
        height_speed = PVector(0, 10)
        rotation_height_speed = 0.1
        power_change = PVector(0, -1)
        click_number = 0
    # print(click_number)
