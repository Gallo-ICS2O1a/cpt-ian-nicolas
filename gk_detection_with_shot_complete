#ball variables
initial_ball_pos = PVector(400, 385)
ball_pos = PVector(400, 385)
ball_size = 30

# goal keeper variables
gk_initial_pos = PVector(400, 175)
gk_pos = PVector(400, 175) # gk is goal keeper
gk_size = 50
gk_radius = gk_size / 2 
is_gk_diving = int(random(0, 10))
diving_side = int(random(0, 2))
diving_distance_x = random(1, 74)
diving_height = random(1, 52)
dive_x = diving_distance_x / diving_height
dive_y = diving_distance_x / diving_distance_x

# Power Bar
power_point = PVector(700, 400)
rect_height_point = PVector(power_point.x - 7.5, power_point.y + 15)
rect_height_dim = PVector(15, 415 - power_point.y - 15)
power_change = PVector(0, 10)
power_location = 183 # 183 is the y location of where the power will make the ball stop
distance_to_net = ball_pos.y - power_location

# Height Bar
bad = color(230, 17, 17)
good = color(17, 230, 34)
height_point = PVector(100, 100)
height_speed = PVector(0, 5)
net_pos = PVector(298, 100)

# Aim Bar
aim_point = PVector(400, 390)
aim_vector = PVector(-50, 0)
rotation_speed = 0.01
min_aim_point = 350 # minimum x coordinate that the aim line can reach
min_shot_point = 0 # minimum x coordinate that the shot can end up at
max_aim_point = 450 # maximum x coorinate that the aim line can reach
max_shot_point = 800 # maxiumum x cooridnate that the aim line can end up at
good_aim_rect_pos = PVector(388.125, 340)
bad_aim_rect_pos1 = PVector(350, 340)
bad_aim_rect_pos2 = PVector(411.875, 340)


# status
click_number = 0
power_status = False
height_status = False
rebounding_status = False

def setup():
    size(800, 500)
    

def draw():
    global click_number, gk_pos, gk_size, ball_radius, gk_radius, initial_ball_pos
    global power_point, rect_height_point, rect_height_dim, power_change
    global power_location, power_status, rebounding_status
    global ball_pos, ball_size, shot_y, shot_x, gk_initial_pos
    global bad, good, height_point, height_speed, height_power, height_status
    global net_pos, distance_to_net, aim, dive_x, dive_y
    global aim_point, aim_vector, rotation_speed, bad_aim_rect_pos1, good_aim_rect_pos, bad_aim_rect_pos2
    global diving_distance_x, is_gk_diving, diving_side, diving_height
    
    ball_to_gk_vect = PVector.sub(gk_pos, ball_pos)
    ball_to_gk_dist = ball_to_gk_vect.mag()

    
    background(255)
    
    # Power Arrow

    fill(0)
    triangle(power_point.x, power_point.y, power_point.x - 25, power_point.y + 15, power_point.x + 25, power_point.y + 15)
    rect(rect_height_point.x, rect_height_point.y, rect_height_dim.x, rect_height_dim.y)
    
    if power_point.y <= 0 or power_point.y >= 400:
    
        power_change = power_change.mult(-1)
    
            
    power_point.add(power_change)
    rect_height_dim = PVector(15, -(415 - power_point.y - 15))

    #net
    fill(255)
    stroke(0)
    strokeWeight(2)
    rect(net_pos.x, net_pos.y, 204, 100)
    
    # goalkeeper
    fill(255, 0, 0)
    noStroke()
    ellipse(gk_pos.x, gk_pos.y, gk_size, gk_size)
    
    print(is_gk_diving, diving_side, diving_distance_x, diving_height)
    if click_number == 3:
        if is_gk_diving <= 2: # no movement
            gk_pos.x = gk_pos.x
            gk_pos.y = gk_pos.y 
        elif is_gk_diving >= 3: # movement
            if diving_side == 0: # dive left
                if gk_pos.x >= gk_initial_pos.x - diving_distance_x:
                    gk_pos.x -= dive_x
                if gk_pos.y >= gk_initial_pos.y - diving_height:
                        gk_pos.y -= dive_y
        
            elif diving_side == 1:
                    if gk_pos.x <= gk_initial_pos.x + diving_distance_x:
                        gk_pos.x +=  dive_x
                    if gk_pos.y >= gk_initial_pos.y - diving_height:
                        gk_pos.y -= dive_y

    print(dive_x)
    # Height Bar
    fill(bad)
    rect(100, 0, 50, 200)

    fill(good)
    rect(100, 200, 50, 200)

    stroke(0)
    strokeWeight(5)
    fill(0)
    line(height_point.x, height_point.y, height_point.x + 50, height_point.y)

    height_point.add(height_speed)

    if height_point.y >= 400:
        height_speed = height_speed.mult(-1)
    elif height_point.y <= 0:
        height_speed = height_speed.mult(-1)
    
    # Aim boundary good
    fill(good)
    noStroke()
    rect(good_aim_rect_pos.x, good_aim_rect_pos.y, 23.75, 60)
    
    # Aim boundary bad 1
    fill(bad)
    noStroke()
    rect(bad_aim_rect_pos1.x, bad_aim_rect_pos1.y, 38.125, 60)
    
    # Aim boundary bad 2
    fill(bad)
    noStroke()
    rect(bad_aim_rect_pos2.x, bad_aim_rect_pos2.y, 38.125, 60)
    
    # Aim Line
    stroke(0)
    strokeWeight(2)
    line(aim_point.x, aim_point.y, aim_point.x + aim_vector.x, aim_point.y + aim_vector.y)
    line_angle = degrees(aim_vector.heading())
    if line_angle < -180 or line_angle > 0:
        rotation_speed = -rotation_speed
    aim_vector.rotate(rotation_speed)

    fill(0) 
    ellipse(ball_pos.x, ball_pos.y, ball_size, ball_size)
    
    if power_point.y < 200:
        if click_number == 3:
            if ball_pos.y >= 184:
                power_status = True
                if power_location + height_power.y == 185:
                    if ball_pos.y <= 190:
                        power_status = False
                if power_status == True and rebounding_status == False:
                    ball_pos.y -= shot_y * 5
                    ball_pos.x += shot_x * 5
                    # print(ball_pos.y)
                    fill(0) 
                    ellipse(ball_pos.x, ball_pos.y, ball_size, ball_size)
                    ball_size = ball_size * 0.98
                    ball_radius = ball_size / 2
            else:
                power_status = False

    if ball_pos.y <= 184 and ball_pos.y > power_location + height_power.y and power_status == False and rebounding_status == False:
        height_status = True
        print(ball_to_gk_dist)
        if height_status == True:
            ball_pos.y -= shot_y * 5
            ball_pos.x += shot_x * 5
            if abs(ball_to_gk_dist) <= ball_radius + gk_radius:
                print("touching")
                if initial_ball_pos.y - total_y_distance < gk_initial_pos.y - diving_height:
                    rebounding = False
                    height_status = True
                else:
                    rebounding_status = True
                    height_status = False  
            # else:
            #     ball_pos.y -= shot_y * 5
            #     ball_pos.x += shot_x * 5
    else:
        # if height_status == True:
            # print(ball_pos.y)
        height_status = False
        
    if rebounding_status == True:
        shot_y *= 0.99
        shot_x *= 0.99
        ball_pos.x += shot_x
        ball_pos.y += shot_y
        if abs(shot_x) <= 0.5 and abs(shot_y) <= 0.5:
            shot_x *= 0
            shot_y *= 0
            

def mousePressed():
    global bad, good, height_point, height_speed
    global aim_point, aim_point1, rotation_speed
    global click_number, power, power_point
    global ball_direction, power_change, shot_x, shot_y
    global height_power, power_location, total_y_distance, distance_to_net
    global text_play, min_aim_point, min_shot_point, max_shot_point, max_aim_point
    global ball_pos, ball_size

    
    if click_number == 0:
        height_speed = height_speed.mult(0)
        print(height_point.y)
        if height_point.y >= 391:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 20)))))
        elif height_point.y >= 381:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 19)))))
        elif height_point.y >= 371:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 18)))))
        elif height_point.y >= 361:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 17)))))
        elif height_point.y >= 351:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 16)))))
        elif height_point.y >= 341:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 15)))))
        elif height_point.y >= 331:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 14)))))
        elif height_point.y >= 321:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 13)))))
        elif height_point.y >= 311:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 12)))))
        elif height_point.y >= 301:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 11)))))
        elif height_point.y >= 291:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 10)))))
        elif height_point.y >= 281:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 9)))))
        elif height_point.y >= 271:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 8)))))
        elif height_point.y >= 261:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 7)))))
        elif height_point.y >= 251:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 6)))))
        elif height_point.y >= 241:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 5)))))
        elif height_point.y >= 231:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 4)))))
        elif height_point.y >= 221:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 3)))))
        elif height_point.y >= 211:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 2)))))
        elif height_point.y >= 201:
            height_power = PVector(0, (-(power_location - (115 +(3.5 * 1)))))
        
        elif height_point.y == 200:
            height_power = PVector(0, -80)
        elif height_point.y <= 199:
            height_power = PVector(0, - 100)
        
        # print(height_power)
        click_number += 1
        total_y_distance = distance_to_net - height_power.y
        print(height_power.y)
        
    elif click_number == 1:
        rotation_speed = 0
        aim_x = 400 + aim_vector.x
        aim = (aim_x - min_aim_point)*((aim_point.x - min_shot_point)/(aim_point.x - min_aim_point))
        print(aim)
        relative_aim = aim - 400
        shot_x = relative_aim / total_y_distance
        shot_y = shot_x / shot_x
        click_number += 1
        
    elif click_number == 2:
        power_change = power_change.mult(0)
        power = PVector(0, rect_height_dim.y + 15)
        print(207- height_power.y) # total_y_distance
        click_number += 1
    

    
