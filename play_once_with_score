# Menu
text_instruction = 30
text_play = 30
filler = 255
instruction = False
play = False

# ball variables
ball_pos = PVector(400, 385)
ball_size = 30
gk_initial_pos = PVector(400, 175)
gk_pos = PVector(400, 175)  # gk is goal keeper
gk_size = 50
gk_radius = gk_size / 2
is_gk_diving = int(random(0, 10))
diving_side = int(random(0, 2))
diving_distance_x = random(1, 74)
diving_height = random(1, 52)
dive_x = diving_distance_x / diving_height
dive_y = diving_distance_x / diving_distance_x

# Power Bar
power_point = PVector(700, 250)
rect_height_point = PVector(power_point.x - 7.5, power_point.y + 15)
rect_height_dim = PVector(15, 265 - power_point.y - 15)
power_change = PVector(0, 2)
# 183 is the y location of where the power will make the ball stop
power_location = 183
distance_to_net = ball_pos.y - power_location
power_miss = 230  # ball power if shot is too short

# Height Bar
bad = color(230, 17, 17)
good = color(17, 230, 34)
height_point = PVector(100, 100)
height_speed = PVector(0, 5)
net_pos = PVector(298, 100)

# Aim Bar
aim_point = PVector(400, 390)
aim_vector = PVector(-50, 0)
rotation_speed = 0.01
min_aim_point = 350  # minimum x coordinate that the aim line can reach
min_shot_point = 0  # minimum x coordinate that the shot can end up at
max_aim_point = 450  # maximum x coorinate that the aim line can reach
max_shot_point = 800  # maxiumum x cooridnate that the aim line can end up at
good_aim_rect_pos = PVector(388.125, 340)
bad_aim_rect_pos1 = PVector(350, 340)
bad_aim_rect_pos2 = PVector(411.875, 340)


# background variables
grass_pos = PVector(0, 200)
sky_pos = PVector(0, 0)

# status
player_shooting = True
gk_screen_goal = False
gk_screen_miss = False
player_score_once = False
cpu_score_once = False
click_number = 0
power_status = False
height_status = False
dive_choice = True
cpu_shooting_status = True
next = False
start_shooting = False

# gk screen variables
cpu_ball_pos = PVector(400, 385)
cpu_ball_size = 30
ball_x_movement_pos = random(290, 510)
ball_y_movement_pos = random(95, 193)
ball_power = int(random(0, 16))
ball_distance = PVector(ball_x_movement_pos - ball_pos.x, ball_y_movement_pos - ball_pos.y)
cpu_shot_x = ball_distance.x / ball_distance.y
cpu_shot_y = ball_distance.x / ball_distance.x
dive_pos = PVector(400, 175)

# background variables
grass_pos = PVector(0, 200)
sky_pos = PVector(0, 0)


# Fan variables
red_team = color(230, 17, 17)
blue_team = color(17, 17, 230)
red_fan_pos = PVector(15, 250)
blue_fan_pos = PVector(785, 250)
fan_size = PVector(30, 50)
fan_jump = 210
jump_speed_red = 0
jump_speed_blue = 0
red_fan_head_pos = PVector(15, 215)
blue_fan_head_pos = PVector(785, 215)
head_size = PVector(20, 20)

# score variables
score_player = 0
score_cpu = 0

def setup():
    size(800, 500)


def draw():
    global instruction, text_play, filler
    global text_instruction, play
    global player_shooting, cpu_shooting
    global cpu_shooting_status

    background(filler)
    fill(0)
    textSize(50)
    text("Menu:", 350, 100)

    textSize(text_instruction)
    text("Instructions", 100, 150)
    textSize(text_play)
    text("Play", 100, 200)

    # instruction
    if mouseX > 100 and mouseX < 270 and mouseY > 100 and mouseY < 150:
        text_instruction = 50
    else:
        text_instruction = 30
    if instruction is True:
        background(255)
        fill(0)
        textSize(30)
        text("Instructions:", 300, 80)
        textSize(10)
        text("These are the instructions", 100, 200)
        fill(255)
        rect(700, 400, 100, 100)
        fill(0)
        if mouseX > 700 and mouseX < 800 and mouseY > 400 and mouseY < 500:
            back = 5
        else:
            back = 0
        textSize(10 + back)
        text("<-- BACK", 720, 450)

    # play
    if mouseX > 100 and mouseX < 160 and mouseY > 150 and mouseY < 200:
        text_play = 50
    else:
        text_play = 30

    if play is True:
        if player_shooting is True:
            background(100, 255, 10)
            global click_number, gk_pos, gk_size, ball_radius, gk_radius
            global power_point, rect_height_point, rect_height_dim, power_change
            global power_location, power_status
            global ball_pos, ball_size, shot_y, shot_x
            global bad, good, height_point, height_speed, height_power, height_status
            global net_pos, distance_to_net, aim, dive_x, dive_y
            global aim_point, aim_vector, rotation_speed, bad_aim_rect_pos1, good_aim_rect_pos, bad_aim_rect_pos2
            global diving_distance_x, is_gk_diving, diving_side, diving_height
            global grass_pos, sky_pos, power_miss
            global player_score_once
            global cpu_ball_radius
            global next, score_player, score_cpu
            ball_to_gk_vect = PVector.sub(gk_pos, ball_pos)
            ball_to_gk_dist = ball_to_gk_vect.mag()
            ball_radius = ball_size / 2

            background(255)

            # grass
            noStroke()
            fill(100, 255, 0)
            rect(grass_pos.x, grass_pos.y, 800, 300)

            # sky
            noStroke()
            fill(0, 100, 255)
            rect(sky_pos.x, sky_pos.y, 800, 200)

            # Power Arrow
            fill(0)
            textSize(20)
            text("Power", power_point.x - 30, 430)
            
            fill(0)
            triangle(power_point.x, power_point.y, power_point.x - 25,
                     power_point.y + 15, power_point.x + 25, power_point.y + 15)
            rect(rect_height_point.x, rect_height_point.y,
                 rect_height_dim.x, rect_height_dim.y)

            if power_point.y > 250 or power_point.y < 175:
                power_change = power_change.mult(-1)

            power_point.add(power_change)
            rect_height_dim = PVector(15, -(265 - power_point.y - 15))

            # net
            fill(255)
            stroke(0)
            strokeWeight(2)
            rect(net_pos.x, net_pos.y, 204, 100)

            # goalkeeper
            fill(255, 0, 0)
            noStroke()
            ellipse(gk_pos.x, gk_pos.y, gk_size, gk_size)

            # gk random diving
            if click_number == 3:
                if is_gk_diving <= 2:  # no movement
                    gk_pos.x = gk_pos.x
                    gk_pos.y = gk_pos.y
                elif is_gk_diving >= 3:  # movement
                    if diving_side == 0:  # dive left
                        if gk_pos.x >= gk_initial_pos.x - diving_distance_x:
                            gk_pos.x -= dive_x
                        if gk_pos.y >= gk_initial_pos.y - diving_height:
                            gk_pos.y -= dive_y

                    elif diving_side == 1:
                        if gk_pos.x <= gk_initial_pos.x + diving_distance_x:
                            gk_pos.x += dive_x
                        if gk_pos.y >= gk_initial_pos.y - diving_height:
                            gk_pos.y -= dive_y

            # Height Bar
            fill(0)
            textSize(20)
            text("Height", 75, 430)
            
            stroke(0)
            strokeWeight(2)
            fill(bad)
            rect(100, 0, 20, 200)

            fill(good)
            rect(100, 200, 20, 200)

            stroke(0)
            strokeWeight(5)
            fill(0)
            line(height_point.x, height_point.y,
                 height_point.x + 20, height_point.y)

            height_point.add(height_speed)

            if height_point.y >= 400:
                height_speed = height_speed.mult(-1)
            elif height_point.y <= 0:
                height_speed = height_speed.mult(-1)

            # Aim boundary good
            stroke(0)
            strokeWeight(2)
            fill(good)
            rect(good_aim_rect_pos.x, good_aim_rect_pos.y, 23.75, 60)

            # Aim boundary bad 1
            fill(bad)
            rect(bad_aim_rect_pos1.x, bad_aim_rect_pos1.y, 38.125, 60)

            # Aim boundary bad 2
            fill(bad)
            rect(bad_aim_rect_pos2.x, bad_aim_rect_pos2.y, 38.125, 60)

            # Aim Line
            fill(0)
            textSize(20)
            text("Direction", 360, 430)
            
            line(aim_point.x, aim_point.y, aim_point.x +
                 aim_vector.x, aim_point.y + aim_vector.y)
            line_angle = degrees(aim_vector.heading())
            if line_angle < -180 or line_angle > 0:
                rotation_speed = -rotation_speed
            aim_vector.rotate(rotation_speed)

            # ball moving to bottom of net
            if power_point.y < 200:
                if click_number == 3:
                    if ball_pos.y >= 184:
                        power_status = True
                        if power_location + height_power.y == 185:
                            if ball_pos.y <= 190:
                                power_status = False
                        if power_status == True:
                            ball_pos.y -= shot_y * 5
                            ball_pos.x += shot_x * 5
                            # print(ball_pos.y)
                            # fill(0)
                            # ellipse(
                            #     ball_pos.x, ball_pos.y, ball_size, ball_size)
                            ball_size = ball_size * 0.98
                            ball_radius = ball_size / 2
                    else:
                        power_status = False
            else:
                if click_number == 3:
                    if ball_pos.y >= power_miss:
                        power_status = True
                        if power_status == True:
                            ball_pos.y -= shot_y * 5
                            ball_pos.x += shot_x * 5
                            # fill(0)
                            # ellipse(ball_pos.x, ball_pos.y, ball_size, ball_size)
                            ball_size = ball_size * 0.98
                    else:
                        power_status = False
            
            # ball moving up the net
            if ball_pos.y <= 185 and ball_pos.y > power_location + height_power.y and power_status == False:
                height_status = True
                # print(ball_to_gk_dist)
                print(abs(ball_to_gk_dist), ball_radius + gk_radius)
                if height_status == True:
                    ball_pos.y -= shot_y * 5
                    ball_pos.x += shot_x * 5
                    if abs(ball_to_gk_dist) <= ball_radius + gk_radius:
                        print("touching")
            else:
                height_status = False
                
                # goal or miss detection
                if ball_pos.x > net_pos.x + ball_radius and ball_pos.x < (net_pos.x + 204) - ball_radius and ball_pos.y > net_pos.y + ball_radius and ball_pos.y < (net_pos.y + 100) - ball_radius and abs(ball_to_gk_dist) > ball_radius + gk_radius and click_number == 3 and height_status == False and power_status == False:
                    print("goal")
                    textSize(32)
                    text("GOAL", 360, 200)
                    text("next", 700, 50)
                    next = True
                    # if next is True:
                    #     player_shooting = False
                    # play_shooting = False
                    if player_score_once == False:
                        score_player += 1
                        player_score_once = True
                    else:
                        score_player += 0
                    
                elif (ball_pos.x < net_pos.x + ball_radius or ball_pos.x > (net_pos.x + 204) - ball_radius or ball_pos.y < net_pos.y + ball_radius or ball_pos.y > (net_pos.y + 100) - ball_radius or abs(ball_to_gk_dist) < ball_radius + gk_radius) and click_number == 3 and height_status == False and power_status == False:
                    textSize(32)
                    text("MISS", 360, 200)
                    text("next", 700, 50)
                    next = True
                    # if next is True:
                        # player_shooting = False

            # ball
            fill(0)
            ellipse(ball_pos.x, ball_pos.y, ball_size, ball_size)
            
            # score
            fill(0)
            textSize(20)
            text("Player:" + str(score_player), 10, 20)
            
            fill(0)
            textSize(20)
            text("CPU:" + str(score_cpu), 730, 20)
        
        elif player_shooting is not True:
            click_number = 1
            print(click_number)
            global grass_pos, sky_pos, net_pos, gk_size, gk_pos
            global dive_choice, dive_pos, ball_x_movement_pos, ball_y_movement_pos, ball_power
            global ball_power, cpu_shot_x, cpu_shot_y, ball_distance, cpu_shooting_status
            global start_shooting, start_shooting, jump_speed_red, jump_speed_blue, red_fan_head_pos, blue_fan_head_pos, head_size
            global gk_screen_goal, gk_screen_miss
            global cpu_ball_pos,  fan_size, blue_fan_pos, fan_jump
            global cpu_ball_size , cpu_ball_radius, cpu_score_once, score_player, score_cpu
            
            cpu_ball_radius = cpu_ball_size / 2
            ball_to_gk_vect2 = PVector.sub(gk_pos, cpu_ball_pos)
            ball_to_gk_dist2 = ball_to_gk_vect2.mag()

            background(255)

            # grass
            noStroke()
            fill(100, 255, 0)
            rect(grass_pos.x, grass_pos.y, 800, 300)

            # sky
            noStroke()
            fill(0, 100, 255)
            rect(sky_pos.x, sky_pos.y, 800, 200)

            # net
            fill(255)
            stroke(0)
            strokeWeight(2)
            rect(net_pos.x, net_pos.y, 204, 100)

            
            # red fans
            fill(red_team)
            noStroke()
            ellipse(red_fan_pos.x, red_fan_pos.y, fan_size.x, fan_size.y)
            ellipse(red_fan_head_pos.x, red_fan_head_pos.y, head_size.x, head_size.y)
            red_fan_pos.y += jump_speed_red
            red_fan_head_pos.y += jump_speed_red
            
            # blue fan variables
            fill(blue_team)
            noStroke()
            ellipse(blue_fan_pos.x, blue_fan_pos.y, fan_size.x, fan_size.y)
            ellipse(blue_fan_head_pos.x, blue_fan_head_pos.y, head_size.x, head_size.y)
            blue_fan_pos.y += jump_speed_blue
            blue_fan_head_pos.y += jump_speed_blue

            # gk blue outline/fill
            if dive_choice is True:
                # ellipse(mouseX, mouseY, 50, 50)
                fill(255)
                stroke(0, 0, 200)
                ellipse(dive_pos.x, dive_pos.y, gk_size, gk_size)
                print("Hello")
            elif dive_choice is False:
                fill(0, 0, 200)
                ellipse(dive_pos.x, dive_pos.y, gk_size, gk_size)
                # dive_choice = False

            if start_shooting is True:
                
                # cpu random shot generation
                if cpu_shooting_status == True:
                    if ball_power == 0:
                        ball_y_movement_pos = 250
                        if cpu_ball_pos.y >= ball_y_movement_pos:
                            cpu_ball_pos.x += cpu_shot_x * 5
                            cpu_ball_pos.y -= cpu_shot_y * 5
                            cpu_ball_size *= 0.98
                        else:
                            cpu_shooting_status = False
                    elif ball_power >= 1:
                        if cpu_ball_pos.y >= ball_y_movement_pos:
                            cpu_ball_pos.x += cpu_shot_x * 5
                            cpu_ball_pos.y -= cpu_shot_y * 5
                            cpu_ball_size *= 0.98
                        else:
                            cpu_shooting_status = False

                # goal or miss detection
                if cpu_ball_pos.x > net_pos.x + cpu_ball_radius and cpu_ball_pos.x < (net_pos.x + 204) - cpu_ball_radius and cpu_ball_pos.y > net_pos.y + cpu_ball_radius and cpu_ball_pos.y < (net_pos.y + 100) - cpu_ball_radius and abs(ball_to_gk_dist2) > (cpu_ball_radius + gk_radius) and click_number == 1 and cpu_shooting_status == False:
                    print("goal")
                    fill(0)
                    textSize(32)
                    text("GOAL", 360, 200)
                    gk_screen_goal = True
                    if cpu_score_once == False:
                        score_cpu += 1
                        cpu_score_once = True
                        noLoop()
                    else:
                        score_cpu += 0
                elif (cpu_ball_pos.x <= net_pos.x + cpu_ball_radius or cpu_ball_pos.x >= (net_pos.x + 204) - cpu_ball_radius or cpu_ball_pos.y <= net_pos.y + cpu_ball_radius or cpu_ball_pos.y >= (net_pos.y + 100) - cpu_ball_radius or abs(ball_to_gk_dist2) <= (cpu_ball_radius + gk_radius)) and click_number == 1 and cpu_shooting_status == False:
                    textSize(32)
                    fill(0)
                    text("MISS", 360, 200)
                    gk_screen_miss = True
                    noLoop()
                # red fan jump
                if gk_screen_goal == True:
                    if red_fan_pos.y > 250:
                        gk_screen_goal = False
                        jump_speed_red = 0
                    elif red_fan_pos.y >= fan_jump:
                        if jump_speed_red == 0:
                            jump_speed_red = -1
                    elif red_fan_pos.y < fan_jump:
                        if jump_speed_red == -1:
                            jump_speed_red = 1
                # blue fan jump        
                elif gk_screen_miss == True:
                    if blue_fan_pos.y > 250:
                        gk_screen_goal = False
                        jump_speed_blue = 0
                    elif blue_fan_pos.y >= fan_jump:
                        if jump_speed_blue == 0:
                            jump_speed_blue = -1
                    elif blue_fan_pos.y < fan_jump:
                        if jump_speed_blue == -1:
                            jump_speed_blue = 1

            fill(0)
            stroke(0)
            ellipse(cpu_ball_pos.x, cpu_ball_pos.y, cpu_ball_size, cpu_ball_size)
            print(click_number)
        # fill(255)
        # rect(700, 0, 100, 50)
        # fill(0)
        # if mouseX > 700 and mouseY < 50:
        #     back = 5
        # else:
        #     back = 0
        # textSize(15 + back)
        # text("<-- Back", 705, 40)

            fill(0)
            textSize(20)
            text("Player:" + str(score_player), 10, 20)
            
            fill(0)
            textSize(20)
            text("CPU:" + str(score_cpu), 730, 20)

def mousePressed():
    global bad, good, height_point, height_speed
    global aim_point, aim_point1, rotation_speed
    global click_number, power, power_point
    global ball_direction, power_change, shot_x, shot_y
    global height_power, power_location, total_y_distance, distance_to_net
    global text_play, min_aim_point, min_shot_point, max_shot_point, max_aim_point
    global ball_pos, ball_size
    global gk_pos
    global player_shooting
    if play is True:
        if player_shooting is True:
            if click_number == 0:
                height_speed = height_speed.mult(0)
                print(height_point.y)
                if height_point.y >= 391:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 20)))))
                elif height_point.y >= 381:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 19)))))
                elif height_point.y >= 371:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 18)))))
                elif height_point.y >= 361:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 17)))))
                elif height_point.y >= 351:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 16)))))
                elif height_point.y >= 341:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 15)))))
                elif height_point.y >= 331:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 14)))))
                elif height_point.y >= 321:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 13)))))
                elif height_point.y >= 311:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 12)))))
                elif height_point.y >= 301:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 11)))))
                elif height_point.y >= 291:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 10)))))
                elif height_point.y >= 281:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 9)))))
                elif height_point.y >= 271:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 8)))))
                elif height_point.y >= 261:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 7)))))
                elif height_point.y >= 251:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 6)))))
                elif height_point.y >= 241:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 5)))))
                elif height_point.y >= 231:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 4)))))
                elif height_point.y >= 221:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 3)))))
                elif height_point.y >= 211:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 2)))))
                elif height_point.y >= 201:
                    height_power = PVector(
                        0, (-(power_location - (115 + (3.5 * 1)))))

                elif height_point.y == 200:
                    height_power = PVector(0, -80)
                else:
                    height_power = PVector(0, - 100)

                # print(height_power)
                click_number += 1
                total_y_distance = distance_to_net - height_power.y
                # print(height_power.y)
                # print(total_y_distance)
                # print(ball_pos.y - total_y_distance, gk_pos.y - diving_height)
                # print(is_gk_diving, diving_side, diving_distance_x, diving_height)
            elif click_number == 1:
                rotation_speed = 0
                aim_x = 400 + aim_vector.x
                aim = (aim_x - min_aim_point) * \
                 ((aim_point.x - min_shot_point) /
                  (aim_point.x - min_aim_point))
                print(aim)
                relative_aim = aim - 400
                shot_x = relative_aim / total_y_distance
                shot_y = shot_x / shot_x
                click_number += 1

            elif click_number == 2:
                power_change = power_change.mult(0)
                power = PVector(0, rect_height_dim.y + 15)
                click_number += 1
        if player_shooting is False and next is True:
            global dive_choice
            global dive_pos
            global start_shooting
            global m
            if dive_choice is True:
                if mouseX > 298 and mouseX < 298 + 204 and mouseY > 100 and mouseY < 200:
                    print(mouseX, mouseY)
                    dive_pos = PVector(mouseX, mouseY)
                    dive_choice = False
            if start_shooting is False:
                if mouseX > 385 and mouseX < 415 and mouseY > 370 and mouseY < 400:
                    start_shooting = True
                    click_number += 1
                    delay(1000)
    elif play is not True:
        click_number = 0
        ball_pos = PVector(400, 385)
        gk_pos = PVector(400, 175)
        height_speed = PVector(0, 5)
        rotation_speed = 0.01
        power_change = PVector(0, 2)


def mouseClicked():
    global filler
    global instruction, play
    global click_number
    global player_shooting
    # instructions
    if instruction is False:
        if mouseX > 100 and mouseX < 270 and mouseY > 100 and mouseY < 150:
            instruction = True
    if instruction is True:
        if mouseX > 700 and mouseX < 800 and mouseY > 400 and mouseY < 500:
            instruction = False
    # print(instruction)

    # play
    if play is False:
        if mouseX > 100 and mouseX < 160 and mouseY > 150 and mouseY < 200:
            play = True
    if player_shooting is True and next is True and mouseX > 700 and mouseX < 800 and mouseY > 0 and mouseY < 100:
        player_shooting = False
